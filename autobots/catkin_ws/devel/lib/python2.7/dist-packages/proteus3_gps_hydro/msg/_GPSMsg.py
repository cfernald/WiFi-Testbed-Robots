"""autogenerated by genpy from proteus3_gps_hydro/GPSMsg.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GPSMsg(genpy.Message):
  _md5sum = "086eb9058d59812396454a204ff44662"
  _type = "proteus3_gps_hydro/GPSMsg"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#  GPS (UTC) time in seconds and microseconds since the epoch 
uint32 time_sec

# GPS (UTC) time in seconds and microseconds since the epoch 
uint32 time_usec

# Latitude in degrees
float32 latitude

# Longitude in degrees
float32 longitude

# Altitude in meters 
float32 altitude

# UTM WGS84 coordinates, easting [m] 
float64 utm_e

# UTM WGS84 coordinates, northing [m]
float64 utm_n

# Quality of fix 0 = invalid, 1 = GPS fix, 2 = DGPS fix, 6 = Dead Reckoning 
uint8 quality

# Number of satellites in view
uint8 num_sats

# Horizontal dilution of position (HDOP)
float32 hdop

# Vertical dilution of position (VDOP)
float32 vdop

# Tracking angle of the GPS
float32 heading

# Horizontal error in meters
# float64 err_horz

# Vertical error in meters
# float64 err_vert

"""
  __slots__ = ['time_sec','time_usec','latitude','longitude','altitude','utm_e','utm_n','quality','num_sats','hdop','vdop','heading']
  _slot_types = ['uint32','uint32','float32','float32','float32','float64','float64','uint8','uint8','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       time_sec,time_usec,latitude,longitude,altitude,utm_e,utm_n,quality,num_sats,hdop,vdop,heading

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GPSMsg, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.time_sec is None:
        self.time_sec = 0
      if self.time_usec is None:
        self.time_usec = 0
      if self.latitude is None:
        self.latitude = 0.
      if self.longitude is None:
        self.longitude = 0.
      if self.altitude is None:
        self.altitude = 0.
      if self.utm_e is None:
        self.utm_e = 0.
      if self.utm_n is None:
        self.utm_n = 0.
      if self.quality is None:
        self.quality = 0
      if self.num_sats is None:
        self.num_sats = 0
      if self.hdop is None:
        self.hdop = 0.
      if self.vdop is None:
        self.vdop = 0.
      if self.heading is None:
        self.heading = 0.
    else:
      self.time_sec = 0
      self.time_usec = 0
      self.latitude = 0.
      self.longitude = 0.
      self.altitude = 0.
      self.utm_e = 0.
      self.utm_n = 0.
      self.quality = 0
      self.num_sats = 0
      self.hdop = 0.
      self.vdop = 0.
      self.heading = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2I3f2d2B3f.pack(_x.time_sec, _x.time_usec, _x.latitude, _x.longitude, _x.altitude, _x.utm_e, _x.utm_n, _x.quality, _x.num_sats, _x.hdop, _x.vdop, _x.heading))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 50
      (_x.time_sec, _x.time_usec, _x.latitude, _x.longitude, _x.altitude, _x.utm_e, _x.utm_n, _x.quality, _x.num_sats, _x.hdop, _x.vdop, _x.heading,) = _struct_2I3f2d2B3f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2I3f2d2B3f.pack(_x.time_sec, _x.time_usec, _x.latitude, _x.longitude, _x.altitude, _x.utm_e, _x.utm_n, _x.quality, _x.num_sats, _x.hdop, _x.vdop, _x.heading))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 50
      (_x.time_sec, _x.time_usec, _x.latitude, _x.longitude, _x.altitude, _x.utm_e, _x.utm_n, _x.quality, _x.num_sats, _x.hdop, _x.vdop, _x.heading,) = _struct_2I3f2d2B3f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2I3f2d2B3f = struct.Struct("<2I3f2d2B3f")
