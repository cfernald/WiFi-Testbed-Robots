// Generated by gencpp from file proteus3_gps_hydro/GPSMsg.msg
// DO NOT EDIT!


#ifndef PROTEUS3_GPS_HYDRO_MESSAGE_GPSMSG_H
#define PROTEUS3_GPS_HYDRO_MESSAGE_GPSMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace proteus3_gps_hydro
{
template <class ContainerAllocator>
struct GPSMsg_
{
  typedef GPSMsg_<ContainerAllocator> Type;

  GPSMsg_()
    : time_sec(0)
    , time_usec(0)
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , utm_e(0.0)
    , utm_n(0.0)
    , quality(0)
    , num_sats(0)
    , hdop(0.0)
    , vdop(0.0)
    , heading(0.0)  {
    }
  GPSMsg_(const ContainerAllocator& _alloc)
    : time_sec(0)
    , time_usec(0)
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , utm_e(0.0)
    , utm_n(0.0)
    , quality(0)
    , num_sats(0)
    , hdop(0.0)
    , vdop(0.0)
    , heading(0.0)  {
    }



   typedef uint32_t _time_sec_type;
  _time_sec_type time_sec;

   typedef uint32_t _time_usec_type;
  _time_usec_type time_usec;

   typedef float _latitude_type;
  _latitude_type latitude;

   typedef float _longitude_type;
  _longitude_type longitude;

   typedef float _altitude_type;
  _altitude_type altitude;

   typedef double _utm_e_type;
  _utm_e_type utm_e;

   typedef double _utm_n_type;
  _utm_n_type utm_n;

   typedef uint8_t _quality_type;
  _quality_type quality;

   typedef uint8_t _num_sats_type;
  _num_sats_type num_sats;

   typedef float _hdop_type;
  _hdop_type hdop;

   typedef float _vdop_type;
  _vdop_type vdop;

   typedef float _heading_type;
  _heading_type heading;




  typedef boost::shared_ptr< ::proteus3_gps_hydro::GPSMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::proteus3_gps_hydro::GPSMsg_<ContainerAllocator> const> ConstPtr;

}; // struct GPSMsg_

typedef ::proteus3_gps_hydro::GPSMsg_<std::allocator<void> > GPSMsg;

typedef boost::shared_ptr< ::proteus3_gps_hydro::GPSMsg > GPSMsgPtr;
typedef boost::shared_ptr< ::proteus3_gps_hydro::GPSMsg const> GPSMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::proteus3_gps_hydro::GPSMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::proteus3_gps_hydro::GPSMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace proteus3_gps_hydro

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'proteus3_gps_hydro': ['/home/blue/catkin_ws/src/proteus3_gps_hydro/msg', '/home/blue/catkin_ws/src/proteus3_gps_hydro/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::proteus3_gps_hydro::GPSMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::proteus3_gps_hydro::GPSMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::proteus3_gps_hydro::GPSMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::proteus3_gps_hydro::GPSMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::proteus3_gps_hydro::GPSMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::proteus3_gps_hydro::GPSMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::proteus3_gps_hydro::GPSMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "086eb9058d59812396454a204ff44662";
  }

  static const char* value(const ::proteus3_gps_hydro::GPSMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x086eb9058d598123ULL;
  static const uint64_t static_value2 = 0x96454a204ff44662ULL;
};

template<class ContainerAllocator>
struct DataType< ::proteus3_gps_hydro::GPSMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "proteus3_gps_hydro/GPSMsg";
  }

  static const char* value(const ::proteus3_gps_hydro::GPSMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::proteus3_gps_hydro::GPSMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#  GPS (UTC) time in seconds and microseconds since the epoch \n\
uint32 time_sec\n\
\n\
# GPS (UTC) time in seconds and microseconds since the epoch \n\
uint32 time_usec\n\
\n\
# Latitude in degrees\n\
float32 latitude\n\
\n\
# Longitude in degrees\n\
float32 longitude\n\
\n\
# Altitude in meters \n\
float32 altitude\n\
\n\
# UTM WGS84 coordinates, easting [m] \n\
float64 utm_e\n\
\n\
# UTM WGS84 coordinates, northing [m]\n\
float64 utm_n\n\
\n\
# Quality of fix 0 = invalid, 1 = GPS fix, 2 = DGPS fix, 6 = Dead Reckoning \n\
uint8 quality\n\
\n\
# Number of satellites in view\n\
uint8 num_sats\n\
\n\
# Horizontal dilution of position (HDOP)\n\
float32 hdop\n\
\n\
# Vertical dilution of position (VDOP)\n\
float32 vdop\n\
\n\
# Tracking angle of the GPS\n\
float32 heading\n\
\n\
# Horizontal error in meters\n\
# float64 err_horz\n\
\n\
# Vertical error in meters\n\
# float64 err_vert\n\
";
  }

  static const char* value(const ::proteus3_gps_hydro::GPSMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::proteus3_gps_hydro::GPSMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time_sec);
      stream.next(m.time_usec);
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.altitude);
      stream.next(m.utm_e);
      stream.next(m.utm_n);
      stream.next(m.quality);
      stream.next(m.num_sats);
      stream.next(m.hdop);
      stream.next(m.vdop);
      stream.next(m.heading);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct GPSMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::proteus3_gps_hydro::GPSMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::proteus3_gps_hydro::GPSMsg_<ContainerAllocator>& v)
  {
    s << indent << "time_sec: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.time_sec);
    s << indent << "time_usec: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.time_usec);
    s << indent << "latitude: ";
    Printer<float>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<float>::stream(s, indent + "  ", v.longitude);
    s << indent << "altitude: ";
    Printer<float>::stream(s, indent + "  ", v.altitude);
    s << indent << "utm_e: ";
    Printer<double>::stream(s, indent + "  ", v.utm_e);
    s << indent << "utm_n: ";
    Printer<double>::stream(s, indent + "  ", v.utm_n);
    s << indent << "quality: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.quality);
    s << indent << "num_sats: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.num_sats);
    s << indent << "hdop: ";
    Printer<float>::stream(s, indent + "  ", v.hdop);
    s << indent << "vdop: ";
    Printer<float>::stream(s, indent + "  ", v.vdop);
    s << indent << "heading: ";
    Printer<float>::stream(s, indent + "  ", v.heading);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PROTEUS3_GPS_HYDRO_MESSAGE_GPSMSG_H
